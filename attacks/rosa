import cv2
import numpy as np
from torch import optim
import torchvision.transforms as transforms
from model import GateNet
import torch
import torch.nn.functional as F
import os
from torch.autograd import Variable

os.environ["CUDA_VISIBLE_DEVICES"] = "1"

MAX_ITER = 20
step_size = 0.01
img_height,img_width=384,384

model = GateNet().cuda()
model.load_state_dict(torch.load('/media/godson/D/ParcharmProject/GateNet/weight/100000_res50.pth'))
model.eval()

optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)

set='SOD'
savedir='/media/godson/D/ParcharmProject/GateNet/data/'+set+'/AS/'
datasets_root_test ='/media/godson/D/ParcharmProject/GateNet/data/'+set
test_data = os.path.join(datasets_root_test)
to_test = {'test':test_data}

img_transform = transforms.Compose([
    # transforms.ColorJitter(0.1, 0.1, 0.1),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])

])
target_transform = transforms.ToTensor()
to_pil = transforms.ToPILImage()

for name, root in to_test.items():
    root1 = os.path.join(root,'mask')
    img_list = [os.path.splitext(f)[0] for f in os.listdir(root1) if f.endswith('.png')]
    for idx, img_name in enumerate(img_list):
        img1=cv2.imread(os.path.join(root,'image/'+img_name+'.jpg'))
        img = Variable(img_transform(img1).unsqueeze(0), volatile=True).cuda()
        img.requires_grad=True
        res = model(img)
        res = F.sigmoid(res)

        r=torch.zeros_like(img)

        # 初始01显著图
        om=res.clone().detach().cpu().numpy().squeeze()
        target=np.argwhere(om>=0)
        idx=np.argwhere((om>=0.5))
        h=idx[:,0]
        w=idx[:,1]
        saliency_map=np.zeros((img_height,img_width,1))
        saliency_map[h,w,0]=1

        #开始
        mask = np.zeros((1,1,img_height, img_width))
        itr = 1
        e = 0.0
        bound=torch.max(img)/255*20 
        while itr<=MAX_ITER and len(target)!=0:
                a = torch.ones((1,1, img_height, img_width)).cuda()
                itr = itr + 1

                # 构造目标掩膜
                mask[mask==1]==0
                h=target[:,0]
                w=target[:,1]
                mask[0,0,h,w]=1

                res.backward(torch.autograd.Variable(torch.from_numpy(mask), requires_grad=True).cuda(), retain_graph=True)
                dx_2=img.grad.clone().detach().cpu().numpy()

                optimizer.zero_grad()
                img.grad.data.zero_()

                res2=a-res
                res2.backward(torch.autograd.Variable(torch.from_numpy(mask), requires_grad=True).cuda(), retain_graph=True)
                dx=img.grad.clone().detach().cpu().numpy()

                # 梯度清零
                optimizer.zero_grad()
                img.grad.data.zero_()

                p_rgb=dx-dx_2
                p_rgb=step_size*p_rgb/np.max(p_rgb)
                r=r+torch.from_numpy(p_rgb).cuda()

                a=torch.abs(torch.max(r))
                if a>=bound:
                        break;

                res = model(img+r)
                img_pred = F.sigmoid(res)

                # 新01显著图
                om=img_pred.clone().detach().cpu().numpy().squeeze()
                idx = np.argwhere((om >= 0.5))
                h = idx[:, 0]
                w = idx[:, 1]
                new_saliency_map = np.zeros((img_height,img_width,1))
                new_saliency_map[h, w,0] = 1

                target=np.argwhere(saliency_map==new_saliency_map)

        ori = (img+r).squeeze().cpu().detach().numpy()

        ori=ori.transpose(1, 2, 0)
        mean,std=[0.485, 0.456, 0.406], [0.229, 0.224, 0.225]
        ori=ori*std+mean
        cv2.imwrite(savedir+img_name+'.jpg',ori*255)
